# -*- coding: utf-8 -*-
"""pemodelan - assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11aA76GyhNRkIl9trDhzCmje-66M2ogWA

# Monte Carlo Simulation
"""

# Import library
import numpy as np
import matplotlib.pyplot as plt

def simulasi_monte_carlo(jumlah_titik):
    x = np.random.rand(jumlah_titik)
    y = np.random.rand(jumlah_titik)

    # titik di dalam lingkaran
    di_dalam = (x**2 + y**2) <= 1
    jumlah_di_dalam = np.sum(di_dalam)

    # Estimasi nilai π
    estimasi_pi = 4 * jumlah_di_dalam / jumlah_titik

    # Koordinat titik di dalam dan di luar lingkaran
    x_di_dalam = x[di_dalam]
    y_di_dalam = y[di_dalam]
    x_di_luar = x[~di_dalam]
    y_di_luar = y[~di_dalam]

    return estimasi_pi, x_di_dalam, y_di_dalam, x_di_luar, y_di_luar

def visualisasi_simulasi(x_di_dalam, y_di_dalam, x_di_luar, y_di_luar, estimasi_pi):
    # Plot titik di dalam dan di luar lingkaran
    plt.scatter(x_di_dalam, y_di_dalam, color="orange", label="Di dalam lingkaran")
    plt.scatter(x_di_luar, y_di_luar, color="black", label="Di luar lingkaran")

    # Gambar lingkaran
    lingkaran = plt.Circle((0, 0), 1, color="red", fill=False)
    plt.gca().add_patch(lingkaran)

    # Batas plot
    plt.xlim(0, 1)
    plt.ylim(0, 1)
    plt.gca().set_aspect("equal", adjustable="box")

    plt.title(f"Estimasi π: {estimasi_pi:.4f}")
    plt.legend()
    plt.show()

# Main program
if __name__ == "__main__":
    jumlah_titik = 10000

    # Simulasi Monte Carlo
    estimasi_pi, x_di_dalam, y_di_dalam, x_di_luar, y_di_luar = simulasi_monte_carlo(jumlah_titik)

    # Tampilkan hasil estimasi π
    print(f"Estimasi π dengan {jumlah_titik} titik: {estimasi_pi:.4f}")

    # Visualisasi hasil simulasi
    visualisasi_simulasi(x_di_dalam, y_di_dalam, x_di_luar, y_di_luar, estimasi_pi)